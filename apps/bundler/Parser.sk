module Parser;

// The result of parsing a source file
class ParserResult{
  // Possibly empty list of file paths extracted from `require('<path>')` statements
  requires: Vector<String>,
  // The text following the last require() statement
  remainingText: String,
}

// Parses text to extract require() dependencies, returning a ParserResult.
fun parse(text: String): ParserResult {
  Parser::new(text).getRequires();
}

// Private parser class for demonstration purposes - a production version would
// need a more robust parser.
private mutable class Parser private (
  text: String,
  iterator: mutable String.StringIterator,
  mutable lengthSoFar: Int,
  mutable lastRequire: mutable String.StringIterator,
  requires: mutable Vector<String>,
) {
  static fun new(text: String): mutable this {
    iterator = String.StringIterator::make(text);
    mutable static(
        text,
        iterator,
        0,
        iterator,
        mutable Vector[]
    )
  }

  mutable fun getRequires(): ParserResult {
    this.parse();
    remainingText = this.text.sub(
      this.lastRequire,
      this.text.length() - this.lengthSoFar,
    );
    ParserResult{requires => freeze(this.requires), remainingText}
  }

  private mutable fun next(): (mutable String.StringIterator, ?Char) {
    this.!lengthSoFar = this.lengthSoFar + 1;
    (this.iterator, this.iterator.next())
  }

  private mutable fun parse(): void {
    (_, char) = this.next();
    char match {
    | None() -> void
    | Some('r') ->
      startPos = this.lengthSoFar;
      first = this.iterator;
      this.parseKeyword();
      len = this.lengthSoFar - startPos;
      if (this.text.sub(first, len) == "require") {
        filename = this.parseRequire();
        this.requires.push(filename);
      };
      this.parse()
    | _ -> this.parse()
    };
  }

  private mutable fun parseKeyword(): void {
          (_, char) = this.next();
          char match {
          | Some(x) if (x >= 'a' && x <= 'z' || x >= 'A' && x <= 'Z') -> void
          | _ -> this.parseKeyword()
          }
  }

  private mutable fun parseRequire(): String {
    char: ?Char = Some('0');
    while (char != None() && char != Some('\'')) {
      (_, !char) = this.next()
    };
    (first, !char) = this.next();
    last = first;
    span = 0;
    while (char != None() && char != Some('\'')) {
      !span = span + 1;
      (!last, !char) = this.next()
    };
    result = this.text.sub(first, span);
    while (char != None() && char != Some('\n')) {
      (!last, !char) = this.next()
    };
    this.!lastRequire = last;
    result
  }
}

module end;
